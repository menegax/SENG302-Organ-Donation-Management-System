package utility;

import javafx.scene.Node;
import javafx.scene.input.RotateEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.input.TouchEvent;
import javafx.scene.input.ZoomEvent;
import javafx.scene.layout.Pane;
import javafx.stage.Screen;
import javafx.stage.Window;

import java.awt.geom.Rectangle2D;

/**
 * Wrapper class for a Pane object to enable base touch functionality, including zooming, rotating and scrolling
 */
public class TouchPaneController {

    /**
     * Pane to perform touch operations on
     */
    private Pane pane;

    private javafx.geometry.Rectangle2D bounds = Screen.getPrimary().getVisualBounds();

    /**
     * Creates a new TouchPaneController
     * @param pane base pane
     */
    public TouchPaneController(Pane pane) {
        this.pane = pane;
    }

    /**
     * Zooms in and out of the pane by the zoom event generated by the user
     * @param zoomEvent zoom event
     */
    public void zoomPane(ZoomEvent zoomEvent) {
        pane.toFront();
//        Window currentWindow = ((Node)zoomEvent.getTarget()).getScene().getWindow();
        pane.setScaleX(pane.getScaleX() * zoomEvent.getZoomFactor());
//        currentWindow.setWidth(currentWindow.getWidth() * zoomEvent.getZoomFactor());
        pane.setScaleY(pane.getScaleY() * zoomEvent.getZoomFactor());
//        currentWindow.setHeight(currentWindow.getHeight() * zoomEvent.getZoomFactor());
//        resizePane();
    }

    /**
     * Rotates the pane using the rotate event generated by the user
     * @param rotateEvent rotate event
     */
    public void rotatePane(RotateEvent rotateEvent) {
        pane.toFront();
        pane.setRotate(pane.getRotate() + rotateEvent.getAngle() * 0.8);
    }

    /**
     * Scrolls in four directions along pane by a scroll event generated by the user
     * @param scrollEvent scroll event
     */
    public void scrollPane(ScrollEvent scrollEvent) {
        pane.toFront();
        if(!outOfBoundsX()) {
            pane.setTranslateX(pane.getTranslateX() + scrollEvent.getDeltaX());
        } else {
            if(pane.getTranslateX() < 0) {
                pane.setTranslateX(bounds.getMaxX() - pane.getWidth() / 2 + scrollEvent.getDeltaX());
            } else {
                pane.setTranslateX(-1 * pane.getWidth() / 2 + scrollEvent.getDeltaX());
            }
        }

        if(!outOfBoundsY()) {
            pane.setTranslateY(pane.getTranslateY() + scrollEvent.getDeltaY());
        } else {
            if(pane.getTranslateY() < 0) {
                pane.setTranslateY(bounds.getMaxY() - pane.getHeight() / 2 + scrollEvent.getDeltaY());
            } else {
                pane.setTranslateY(-1 * pane.getHeight() / 2 + scrollEvent.getDeltaY());
            }
        }
    }


    private boolean outOfBoundsX() {
        return pane.getTranslateX() > bounds.getMaxX() - pane.getWidth() / 2 || pane.getTranslateX() <= bounds.getMaxX() * -1 + pane.getWidth();
    }

    private boolean outOfBoundsY() {
        return pane.getTranslateY() > bounds.getMaxY() - pane.getHeight() / 2 || pane.getTranslateY() <= bounds.getMaxY() * -1 + pane.getHeight() / 2;
    }

}
